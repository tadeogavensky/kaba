generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String    @id @default(cuid())
  firstName      String?
  lastName       String?
  username String?
  email          String?
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  role           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  bookings       Booking[]
  reviews        Review[]
  inbox          Inbox[]
  address        Address?  @relation(fields: [addressId], references: [id])
  addressId      Int?
  Client         Client?
  Worker         Worker?
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Client {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Worker {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  service   Service? @relation(fields: [serviceId], references: [id])
  rate      Rate?    @relation(fields: [rateId], references: [id])
  serviceId Int?
  rateId    Int?
}

model Address {
  id          Int       @id @default(autoincrement())
  fullAddress String?
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  clientId    Int?
  bookings    Booking[]
  User        User[]
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @db.Text
  image       String
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  rates       Rate[]
  Worker      Worker[]
}

model Rate {
  id        Int      @id @default(autoincrement())
  rate      Float
  service   Service  @relation(fields: [serviceId], references: [id])
  workerId  Int
  serviceId Int
  Worker    Worker[]
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  image   String
  service Service[]
}

model Booking {
  id            Int         @id @default(autoincrement())
  date          DateTime    @default(now()) @db.Date
  time          DateTime    @db.Time()
  address       Address     @relation(fields: [addressId], references: [id])
  clientId      Int
  addressId     Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  workerId      Int?
  transactionId Int
  User          User?       @relation(fields: [userId], references: [id])
  userId        String?
}

model Review {
  id       Int      @id @default(autoincrement())
  rating   Int
  comment  String?
  date     DateTime @default(now())
  clientId Int
  workerId Int?
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?
}

model Inbox {
  id       Int       @id @default(autoincrement())
  messages Message[]
  clientId Int
  workerId Int?
  User     User?     @relation(fields: [userId], references: [id])
  userId   String?
}

model Message {
  id             Int      @id @default(autoincrement())
  text           String
  sender         String
  conversation   Inbox    @relation(fields: [conversationId], references: [id])
  conversationId Int
  createdAt      DateTime @default(now())
}

model Transaction {
  id        Int       @id @default(autoincrement())
  amount    Float
  date      DateTime  @default(now())
  bookingId Int
  Booking   Booking[]
}
