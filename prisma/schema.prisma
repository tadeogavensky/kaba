generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  firstName      String?
  lastName       String?
  username       String?         @unique
  email          String?
  phone          String?
  emailVerified  Boolean         @default(false)
  phoneVerified  Boolean         @default(false)
  hashedPassword String?
  active         Boolean         @default(false)
  identity       String?
  image          String?
  role           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  activateTokens ActivateToken[]
  bookings       Booking[]
  client         Client?
  notifications  Notification[]
  worker         Worker?
  receipts       Receipt[]
}

model ActivateToken {
  id          String    @id @default(cuid())
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model Client {
  id        String    @id @default(cuid())
  firstName String?
  lastName  String?
  userId    String    @unique
  addresses Address[]
  user      User      @relation(fields: [userId], references: [id])
  bookings  Booking[]
  reviews   Review[]
  chats     Chat[]
  messages   Message[]
}

model Worker {
  id            String    @id @default(cuid())
  available     Boolean?
  totalJobs     Int?
  userId        String    @unique
  serviceId     String?
  rateId        String?
  about         String?
  city          String?
  country       String?
  neighbourhood String?
  number        String?
  postalCode    String?
  state         String?
  street        String?
  rate          Rate?     @relation(fields: [rateId], references: [id])
  service       Service?  @relation(fields: [serviceId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  bookings      Booking[]
  reviews       Review[]
  chats         Chat[]
  messages       Message[]
}

model Address {
  id              String    @id @default(cuid())
  active          Boolean?
  fullAddress     String?
  street          String
  number          String?
  floorDepartment String?
  neighbourhood   String
  city            String
  state           String
  postalCode      String
  country         String
  type            String
  details         String?
  clientId        String?
  client          Client?   @relation(fields: [clientId], references: [id])
  bookings        Booking[]
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String
  image       String
  categoryId  String?
  rates       Rate[]
  category    Category? @relation(fields: [categoryId], references: [id])
  workers     Worker[]
  Booking     Booking[]
}

model Rate {
  id        String   @id @default(cuid())
  rate      Float
  currency  String
  workerId  String
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  worker    Worker[]
}

model Category {
  id      String    @id @default(cuid())
  name    String
  image   String
  service Service[]
}

model Booking {
  id           String   @id @default(cuid())
  date         DateTime @default(now()) @db.Date
  time         String
  workingHours Int
  total        Float
  completed    Boolean  @default(false)
  canceled     Boolean  @default(false)
  active       Boolean  @default(true)
  clientId     String
  workerId     String
  userId       String
  addressId    String
  serviceId    String
  service      Service  @relation(fields: [serviceId], references: [id])
  worker       Worker   @relation(fields: [workerId], references: [id])
  client       Client   @relation(fields: [clientId], references: [id])
  address      Address  @relation(fields: [addressId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  review       Review?
  receipt      Receipt?
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  date      DateTime @default(now())
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  String?
  worker    Worker?  @relation(fields: [workerId], references: [id])
  workerId  String?
  bookingId String   @unique
  booking   Booking  @relation(fields: [bookingId], references: [id])
}

model Chat {
  id       String    @id @default(cuid())
  clientId String?
  workerId String?
  userId   String?
  lastMessageAt DateTime @default(now())
  messages Message[]
  client   Client?   @relation(fields: [clientId], references: [id])
  worker   Worker?   @relation(fields: [workerId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  worker    Worker?  @relation(fields: [workerId], references: [id])
  client    Client?  @relation(fields: [clientId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  workerId  String?
  clientId  String?
}

model Notification {
  id     String @id @default(cuid())
  text   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Receipt {
  id        String  @id @default(cuid())
  total     Float
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String  @unique
}
