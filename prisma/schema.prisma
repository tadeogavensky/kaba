generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  phone          String?
  firstName      String?
  lastName       String?
  addresses      Address[]
  profilePicture String?
  bookings       Booking[]
  review         Review[]
  inbox          Inbox[]
}

//KabaProp
model Worker {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  firstName      String?
  lastName       String?
  phone          String?
  about          String?   @db.Text
  street         String?
  city           String?
  state          String?
  postalCode     String?
  country        String?
  profilePicture String?
  bookings       Booking[]
  reviews        Review[]
  inbox          Inbox[]
  rate           Rate?      @relation(fields: [rateId], references: [id])
  service        Service?  @relation(fields: [serviceId], references: [id])
  serviceId      Int?
  rateId         Int
}

model Address {
  id          Int       @id @default(autoincrement())
  fullAddress String?
  street      String //address 1 + address 2 on the frontend or street input
  city        String
  state       String
  postalCode  String
  country     String
  client      Client?   @relation(fields: [clientId], references: [id])
  clientId    Int?
  bookings    Booking[]
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @db.Text
  image       String
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  rates       Rate[]
  workers     Worker[]
}

model Rate {
  id        Int      @id @default(autoincrement())
  rate      Float
  service   Service  @relation(fields: [serviceId], references: [id])
  workerId  Int
  serviceId Int
  Worker    Worker[]
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  image   String
  service Service[]
}

model Booking {
  id            Int         @id @default(autoincrement())
  date          DateTime    @default(now()) @db.Date
  time          DateTime    @db.Time()
  address       Address     @relation(fields: [addressId], references: [id])
  client        Client      @relation(fields: [clientId], references: [id])
  clientId      Int
  addressId     Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  worker        Worker?     @relation(fields: [workerId], references: [id])
  workerId      Int?
  transactionId Int
}

model Review {
  id       Int      @id @default(autoincrement())
  rating   Int
  comment  String?
  date     DateTime @default(now())
  client   Client   @relation(fields: [clientId], references: [id])
  clientId Int
  worker   Worker?  @relation(fields: [workerId], references: [id])
  workerId Int?
}

model Inbox {
  id       Int       @id @default(autoincrement())
  client   Client    @relation(fields: [clientId], references: [id])
  messages Message[]
  clientId Int
  worker   Worker?   @relation(fields: [workerId], references: [id])
  workerId Int?
}

model Message {
  id             Int      @id @default(autoincrement())
  text           String
  sender         String
  conversation   Inbox    @relation(fields: [conversationId], references: [id])
  conversationId Int
  createdAt      DateTime @default(now())
}

model Transaction {
  id        Int       @id @default(autoincrement())
  amount    Float
  date      DateTime  @default(now())
  bookingId Int
  Booking   Booking[]
}
