generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  firstName      String?
  lastName       String?
  username       String?         @unique
  email          String?
  phone          String?
  emailVerified  Boolean         @default(false)
  phoneVerified  Boolean         @default(false)
  hashedPassword String?
  active         Boolean         @default(false)
  identity       String?
  image          String?
  role           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  activateTokens ActivateToken[]
  bookings       Booking[]
  client         Client?
  inbox          Inbox[]
  notifications  Notification[]
  reviews        Review[]
  worker         Worker?
}

model ActivateToken {
  id          String    @id @default(cuid())
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model Client {
  id        String    @id @default(cuid())
  userId    String    @unique
  addresses Address[]
  user      User      @relation(fields: [userId], references: [id])
}

model Worker {
  id            String   @id @default(cuid())
  available     Boolean?
  totalJobs     Int?
  userId        String   @unique
  serviceId     String?
  rateId        String?
  about         String
  city          String?
  country       String?
  neighbourhood String?
  number        String?
  postalCode    String?
  state         String?
  street        String?
  rate          Rate?    @relation(fields: [rateId], references: [id])
  service       Service? @relation(fields: [serviceId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Address {
  id              String    @id @default(cuid())
  active          Boolean?
  fullAddress     String?
  street          String
  number          String?
  floorDepartment String?
  neighbourhood   String
  city            String
  state           String
  postalCode      String
  country         String
  type            String
  details         String?
  clientId        String?
  client          Client?   @relation(fields: [clientId], references: [id])
  bookings        Booking[]
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String
  image       String
  categoryId  String?
  rates       Rate[]
  category    Category? @relation(fields: [categoryId], references: [id])
  Worker      Worker[]
}

model Rate {
  id        String   @id @default(cuid())
  rate      Float
  workerId  String
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  Worker    Worker[]
}

model Category {
  id      String    @id @default(cuid())
  name    String
  image   String
  service Service[]
}

model Booking {
  id            String      @id @default(cuid())
  date          DateTime    @default(now()) @db.Date
  time          DateTime    @db.Time(6)
  clientId      String
  addressId     String
  workerId      String?
  transactionId String
  userId        String?
  address       Address     @relation(fields: [addressId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  User          User?       @relation(fields: [userId], references: [id])
}

model Review {
  id       String   @id @default(cuid())
  rating   Int
  comment  String?
  date     DateTime @default(now())
  clientId String
  workerId String?
  userId   String?
  User     User?    @relation(fields: [userId], references: [id])
}

model Inbox {
  id       String    @id @default(cuid())
  clientId String
  workerId String?
  userId   String?
  User     User?     @relation(fields: [userId], references: [id])
  messages Message[]
}

model Message {
  id             String   @id @default(cuid())
  text           String
  sender         String
  conversationId String
  createdAt      DateTime @default(now())
  conversation   Inbox    @relation(fields: [conversationId], references: [id])
}

model Notification {
  id     String @id @default(cuid())
  text   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Transaction {
  id        String    @id @default(cuid())
  amount    Float
  date      DateTime  @default(now())
  bookingId String
  Booking   Booking[]
}
